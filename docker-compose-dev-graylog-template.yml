   
version: '2'
services:
    web:
      image: klabs/apache_${DOCKER_PHP_VERSION}
      hostname: ${DOCKER_PROJECT_NAME}_web
      container_name: web
      ports:
          - "82:82"
          - "88:88"
      volumes:
          - ./config/apache/sites-available/001-dynamic-vhost-ez5.conf:/etc/apache2/sites-available/001-dynamic-vhost-ez5.conf
          - ./config/apache/sites-available/002-dynamic-vhost-ezplatform.conf:/etc/apache2/sites-available/002-dynamic-vhost-ezplatform.conf
          - ./config/apache/sites-available/003-dynamic-vhost-ez4.conf:/etc/apache2/sites-available/003-dynamic-vhost-ez4.conf
          - ./config/apache/sites-available/ez5-common.conf:/etc/apache2/sites-available/ez5-common.conf
          - ./config/apache/sites-available/ezplatform-common.conf:/etc/apache2/sites-available/ezplatform-common.conf
          - ./logs/apache/:/var/log/apache2
          - "./config/apache/php5/custom_vars.ini:$DOCKER_PHP_CONF_PATH/apache2/conf.d/custom_vars.ini"
          - "./config/apache/php5/timezone.ini:$DOCKER_PHP_CONF_PATH/apache2/conf.d/timezone.ini"
          - "$DOCKER_WWW_ROOT:$DOCKER_WWW_DEST"
          - "$DOCKER_STORAGE_LOCAL_PATH:$DOCKER_STORAGE_MOUNT_POINT"
      env_file:
          - docker-compose.env
          - docker-compose.env.local
      cap_add:
          - SYS_PTRACE
    cli:
      image: klabs/cli_${DOCKER_PHP_VERSION}
      hostname: ${DOCKER_PROJECT_NAME}_cli
      container_name: cli
      privileged: true
      volumes:
          - ./logs/cli:/var/log/php
          # files in /tmp/cron.d get managed by bootstrap.sh
          - ./config/cli/cron.d:/tmp/cron.d
          - ~/.gitconfig:/home/site/.gitconfig
          - ~/.ssh/config:/home/site/.ssh/config
          - "$SSH_AUTH_SOCK:/ssh-agent"
          - "./config/cli/php5/custom_vars.ini:$DOCKER_PHP_CONF_PATH/cli/conf.d/custom_vars.ini"
          - "./config/cli/php5/timezone.ini:$DOCKER_PHP_CONF_PATH/cli/conf.d/timezone.ini"
          - "$DOCKER_WWW_ROOT:$DOCKER_WWW_DEST"
          - "$DOCKER_STORAGE_LOCAL_PATH:$DOCKER_STORAGE_MOUNT_POINT"
      environment:
          - SSH_AUTH_SOCK=/ssh-agent
      env_file:
          - docker-compose.env
          - docker-compose.env.local
      cap_add:
          - SYS_PTRACE
    memcached:
      image: klabs/memcached
      hostname:  ${DOCKER_PROJECT_NAME}_memcached
      container_name: memcached
      ports:
          - "11211:11211"
      volumes:
          - ./logs/memcache/:/var/log/memcache
      env_file:
          - docker-compose.env
          - docker-compose.env.local
      cap_add:
          - SYS_PTRACE
    solr:
      image: klabs/solr4
      hostname: ${DOCKER_PROJECT_NAME}_solr
      container_name: solr
      ports:
          - "8983:8983"
      volumes:
          - "${DOCKER_SOLR_CONF_PATH}:/opt/solr/solr/"
          - ./data/solr/:/opt/solr/data/
          - ./logs/solr/:/opt/solr/logs
      env_file:
          - docker-compose.env
          - docker-compose.env.local
      cap_add:
          - SYS_PTRACE
    varnish:
      image: klabs/varnish
      hostname: ${DOCKER_PROJECT_NAME}_varnish
      container_name: varnish
      ports:
          - "81:81"
      volumes:
          - "${DOCKER_VARNISH_VCL_FILE}:/etc/varnish/default.vcl"
          - ./logs/varnish/:/var/log/varnish
      env_file:
          - docker-compose.env
          - docker-compose.env.local
      cap_add:
          - SYS_PTRACE
          # varnish init daemon wants to set ulimits
          - SYS_RESOURCE
      security_opt:
        - apparmor:unconfined
      depends_on:
          - web
          - cli
    haproxy:
      image: klabs/haproxy
      hostname: ${DOCKER_PROJECT_NAME}_haproxy
      container_name: haproxy
      ports:
          - "80:80"
      volumes:
          - ./config/haproxy/haproxy.cfg:/etc/haproxy/haproxy.cfg
      env_file:
          - docker-compose.env
          - docker-compose.env.local
      depends_on:
          - web
          - varnish
          - solr
    mysql:
      image: klabs/mysql
      hostname: ${DOCKER_PROJECT_NAME}_mysql
      container_name: mysql
      # nb: this prevents the image to start on some ubuntu installs because of apparmor config...
      #privileged: true
      ports:
          - "3307:3306"
      volumes:
          - ./config/mysql/:/etc/mysql/conf.d/
          - ./data/mysql/:/var/lib/mysql
          - ./logs/mysql/:/var/log/mysql
      env_file:
          - docker-compose.env
          - docker-compose.env.local
      cap_add:
          - SYS_PTRACE
      command: ["/root/bootstrap.sh", "mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci"]

    # official phpmyadmin image
    phpmyadmin:
      image: phpmyadmin/phpmyadmin
      hostname: ${DOCKER_PROJECT_NAME}_phpmyadmin
      container_name: phpmyadmin
      env_file:
          - docker-compose.env
          - docker-compose.env.local
      depends_on:
          - mysql
   # Graylog stack
    mongo:
      container_name: graylog-mongo
      image: "mongo:3"
      volumes: 
        - ./config/graylog:/docker-entrypoint-initdb.d
    elasticsearch:
      container_name: graylog-elastic
      image: "elasticsearch:2"
      command: "elasticsearch -Des.cluster.name='graylog'"
    graylog:
      container_name: graylog-server
      image: 'graylog2/server:latest'
      environment:
        GRAYLOG_PASSWORD_SECRET: somepasswordpepper
        GRAYLOG_ROOT_PASSWORD_SHA2: 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
        GRAYLOG_WEB_ENDPOINT_URI: http://127.0.0.1:9000/api
      depends_on:
        - mongo
        - elasticsearch
      ports:
        - "9000:9000"
    filebeats:
        container_name: graylog-filebeat
        #image: TODO_ON_DOCKERHUB_UPLOAD
        build: ./images/filebeat
        depends_on:
            - graylog
        volumes: 
            - ./config/graylog/filebeat:/mnt
            - ./logs:/app-logs
